pragma solidity ^0.4.0;
contract owned {
    address public owner;

    function owned() {
        owner = msg.sender;
    }

    modifier onlyOwner {
        if (msg.sender != owner) throw;
        _;
    }
}
contract Token {
    address public owner;
    mapping (address => uint) public balance;
        uint AverageValue;
        uint ReiceAmount;
        uint TotalValue;
    // Events allow light clients to react on
    // changes efficiently.
    event Sent(address from, address to, uint amount);

    // This is the constructor whose code is
    // run only when the contract is created.
    function Token() {
        owner = msg.sender;
    }
   

    function set(uint x,uint y) {
       
        AverageValue = x;
        ReiceAmount = y;
        TotalValue = x * y;
    }
    function need() constant returns (uint) {
        return TotalValue;
    }
    modifier applyTotalValue() { // Modifier
        if (msg.sender != owner) throw;
        _;
    }

    function send(address receiver1,address receiver2,address receiver3, uint applyTotalValue) {
        if (balance[msg.sender] < applyTotalValue) return;
        balance[msg.sender] -= applyTotalValue;
        balance[receiver1] += applyTotalValue/3;
        balance[receiver2] += applyTotalValue/3;
        balance[receiver3] += applyTotalValue/3;
        Sent(msg.sender, receiver1, applyTotalValue/3);
        Sent(msg.sender, receiver2, applyTotalValue/3);
        Sent(msg.sender, receiver3, applyTotalValue/3);
    }
    
}
