pragma solidity ^0.4.0;
contract donate{
    
    string public standard = 'Token 0.1';
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    //mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);

    function token(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) {
        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens
        totalSupply = initialSupply;                        // Update total supply
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
        decimals = decimalUnits;                            // Amount of decimals for display purposes
    }
    
    
    struct Receiver {
        bytes32 upper; //set the largest number of receiver
        bool arrived;  // confirm if the largest number is arrived
        address receiverad; //the address of receiver
        uint receiveamount;   // confirm the amount receiver had received
    }
    struct Donator{
        address donatorad;
        uint moneydonated;
    }
    
    address public chairperson;
    mapping(address => uint256) public receves;
    mapping(address => uint256) public donators;
    
    Receiver[] public receivers;
    
    function setup(bytes32[] receiverUppers,address[]receiverAd) {
        chairperson = msg.sender;
        for (uint i = 0; i < receiverUppers.length; i++) {
            receivers.push(Receiver({
                upper: receiverUppers[i],
                receiveamount: 0,
                receiverad: receiverAd[i],
                arrived : false
            }));
        }
    }
    
    function pay (uint256 _value,address _to) payable {
        if(donators[msg.sender] < _value)throw;
        donators[msg.sender] -= _value;
        donators[msg.sender] += _value;
        Transfer(msg.sender, _to, _value);
     }
     
    uint256 value1;
    
    function distribution(uint256 value) {
        if (balanceOf[msg.sender] < value) throw;  
        balanceOf[msg.sender] -= value;// Subtract from the sender
        for (uint i =0 ; i < receivers.length; i++){
            value1 = value / receivers.length;
            balanceOf[ receivers[i].receiverad] += value1;
            Transfer(msg.sender, receivers[i].receiverad, value1);
        }
    }
}
